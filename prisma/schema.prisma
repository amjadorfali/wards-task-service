generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int                  @id @default(autoincrement())
  uuid               String               @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teams              Team[]
  phoneNumber        String?
  email              String               @unique
  Incident           Incident[]
  userIdentities     UserIdentitiy[]

  @@map("user")
}

// model Subscription {
//   id     Int    @id @default(autoincrement())
//   planId String
//
//   user   User @relation(fields: [userId], references: [id])
//   userId Int
//
//   startDate DateTime
//   renewDate DateTime
//   endDate   DateTime?
//
//   @@map("subscriptions")
// }

model UserIdentitiy {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  cognitoUid String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_identity")
}

model Team {
  id               Int           @id @default(autoincrement())
  uuid             String        @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  users            User[]
  healthCheck      HealthCheck[]
  incident         Incident[]
  healthCheckUsage Int           @default(0)
  subscription     Subscription  @default(FREE)

  @@map("team")
}

model Incident {
  id            Int            @id @default(autoincrement())
  status        IncidentStatus
  startedAt     DateTime
  cause         String
  assignedUser  User?          @relation(fields: [userId], references: [id])
  team          Team           @relation(fields: [teamId], references: [id])
  healthCheck   HealthCheck    @relation(fields: [healthCheckId], references: [id])
  userId        Int?
  teamId        Int
  healthCheckId String

  @@map("incident")
}

model HealthCheck {
  id         String              @id @default(uuid())
  name       String
  method     Method
  timeout    Int?
  enabled    Boolean             @default(true)
  type       HealthCheckType
  interval   Int
  url        String
  locations  Location[]
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  team       Team                @relation(fields: [teamId], references: [id])
  teamId     Int
  incidents  Incident[]
  metadata   HealthTaskMetadata? @relation(fields: [metadataId], references: [id])
  metadataId Int?                @unique
  insights   TaskInsight?        @relation(fields: [insightsId], references: [id])
  insightsId String              @unique

  @@unique([teamId, name])
  @@map("health_check")
}

model TaskInsight {
  id           String   @id @default(uuid())
  sslIssuedBy  String?
  sslExpiresOn String?
  status       Int?
  updatedAt    DateTime @updatedAt
  HealthCheck HealthCheck?

  @@map("task_insight")
}

model HealthTaskMetadata {
  id              Int          @id @default(autoincrement())
  httpUserName    String?
  httpPassword    String?
  headers         Json?
  assertions      Json?
  requestBody     Json?
  verifySSL       Boolean      @default(false)
  healthCheck     HealthCheck?
  issuedUserEmail String?

  @@map("health_task_metadata")
}



enum Location {
  FRANKFURT
  IRELAND
  CALIFORNIA
  DUBAI
  SYDNEY
}

enum Method {
  GET
  POST
  PUT
  PATCH
  HEAD
}

enum HealthCheckType {
  SWITCH
  HTTP
  SMTP
  POP3
  IMAP
  TCP
  UDP
}

// enum AssertionType {
//   RESPONSE_TIME
//   RESPONSE_CODE
//   RESPONSE_BODY
//   RESPONSE_JSON
//   RESPONSE_HEADER
//   SSL_SERTIFICATE_EXPIRES_IN
// }

enum Roles {
  OWNER
  MODERATOR
  COMMENTER
  READER
}
enum Subscription {
  FREE
  FIRST_TIER
  SECOND_TIER
  THIRD_TIER
}
enum IncidentStatus {
  ONGOING
  RESOLVED
  ACKNOWLEDGED
}

enum Interval {
  SECOND_30
  SECOND_45
  MINUTE_1
  MINUTE_2
  MINUTE_3
  MINUTE_5
  MINUTE_10
  MINUTE_15
  MINUTE_30
}
